Function shortest_path_bfs(edgelist: list of tuples (node0, node1), source_node: int, target_node: int):
    Initialize 'neighbors' as an empty dictionary to store adjacency lists for each node
    For each 'edge (node0, node1)' in 'edgelist':
        If 'node0' not in 'neighbors':
            Initialize 'neighbors[node0]' as an empty list
        Append 'node1' to 'neighbors[node0]'
        If 'node1' not in 'neighbors':
            Initialize 'neighbors[node1]' as an empty list
        Append 'node0' to 'neighbors[node1]'

    Initialize 'queue' as an empty list
    Initialize 'visited' as an empty set
    Initialize 'distance' as a dictionary where each key is a node and each value is set to infinity
    Set 'distance[source_node]' to 0
    Enqueue (source_node, 0) onto 'queue'  # Enqueue tuple of node and its current distance

    While 'queue' is not empty:
        'current_node', 'current_distance' = Dequeue from 'queue'
        If 'current_node' is 'target_node':
            Return 'current_distance'
        If 'current_node' not in 'visited':
            Add 'current_node' to 'visited'
            For each 'neighbor' in 'neighbors[current_node]':
                If 'neighbor' not in 'visited':
                    If 'distance[neighbor]' is greater than 'current_distance' + 1:
                        Set 'distance[neighbor]' to 'current_distance' + 1
                        Enqueue (neighbor, 'current_distance' + 1) onto 'queue'

    If 'distance[target_node]' is infinity:
        Return -1  # Indicates there is no path from source to target
    Else:
        Return 'distance[target_node]'  # Return the shortest path distance

Let G be a graph. The edgelist of graph G is the following: [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]. Without running what is the shortest path length between nodes 1 and 3? Follow the provided pseudocode step-by-step and show all steps. Output the result like that: The shortest path length is ...
To find the shortest path length between nodes 1 and 3 using the Breadth-First Search (BFS) algorithm in the graph with the edge list  [(0,1),(1,2),(2,3),(3,0),(0,2)], let's apply the provided pseudocode:

Step 1: Build the Adjacency List
First, we'll construct the adjacency list for the graph from the given edge list.

Edges:
(0,1)
(1,2)
(2,3)
(3,0)
(0,2)
Constructing Adjacency List:

For edge (0, 1): add 1 to 0's list, and 0 to 1's list.
For edge (1, 2): add 2 to 1's list, and 1 to 2's list.
For edge (2, 3): add 3 to 2's list, and 2 to 3's list.
For edge (3, 0): add 0 to 3's list, and 3 to 0's list.
For edge (0, 2): add 2 to 0's list, and 0 to 2's list.
Resulting Adjacency List:

0: [1, 2, 3]
1: [0, 2]
2: [1, 3, 0]
3: [2, 0]
Step 2: Initialize BFS Structures
Queue: Start with the source node (1) with distance 0. Queue = [(1,0)]
Visited: Empty set to begin with. Visited = {}
Distance: Initialize distances from source node to infinity, except source itself.
Distance = {0: ∞, 1: 0, 2: ∞, 3: ∞}
Step 3: Process the Queue
Start processing nodes from the queue.

Dequeue (1, 0): Current node = 1, Current distance = 0
Add node 1 to Visited: Visited = 1
Neighbors of node 1: [0, 2]
Check node 0, it's not visited, update:
Distance[0] = 1 (0 + 1)
Enqueue (0, 1): Queue = [(0,1)]
Check node 2, it's not visited, update: Distance[2] = 1 (0 + 1)
Enqueue (2, 1): Queue = [(0,1),(2,1)]
Dequeue (0, 1): Current node = 0, Current distance = 1
Add node 0 to Visited: Visited = 1,0
Neighbors of node 0: [1, 2, 3]
Nodes 1 and 2 already visited or in queue, check node 3:
Distance[3] = 2 (1 + 1)
Enqueue (3, 2): Queue = [(2,1),(3,2)]
Dequeue (2, 1): Already in visited, skip further processing.
Dequeue (3, 2): Current node = 3, Current distance = 2
As soon as we dequeue node 3 and it's our target, return the current distance of 2.
Output: The shortest path length is 2.
